{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/ricar/source/repos/kabudjy/Doyou2/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { AuthenticationResultStatus } from '../authorize.service';\nimport { BehaviorSubject } from 'rxjs';\nimport { LoginActions, QueryParameterNames, ApplicationPaths, ReturnUrlType } from '../api-authorization.constants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../authorize.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\n// The main responsibility of this component is to handle the user's login process.\n// This is the starting point for the login process. Any component that needs to authenticate\n// a user can simply perform a redirect to this component with a returnUrl query parameter and\n// let the component perform the login and return back to the return url.\nexport class LoginComponent {\n  constructor(authorizeService, activatedRoute, router) {\n    this.authorizeService = authorizeService;\n    this.activatedRoute = activatedRoute;\n    this.router = router;\n    this.message = new BehaviorSubject(null);\n  }\n  ngOnInit() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const action = _this.activatedRoute.snapshot.url[1];\n      switch (action.path) {\n        case LoginActions.Login:\n          yield _this.login(_this.getReturnUrl());\n          break;\n        case LoginActions.LoginCallback:\n          yield _this.processLoginCallback();\n          break;\n        case LoginActions.LoginFailed:\n          const message = _this.activatedRoute.snapshot.queryParamMap.get(QueryParameterNames.Message);\n          _this.message.next(message);\n          break;\n        case LoginActions.Profile:\n          _this.redirectToProfile();\n          break;\n        case LoginActions.Register:\n          _this.redirectToRegister();\n          break;\n        default:\n          throw new Error(`Invalid action '${action}'`);\n      }\n    })();\n  }\n  login(returnUrl) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const state = {\n        returnUrl\n      };\n      const result = yield _this2.authorizeService.signIn(state);\n      _this2.message.next(undefined);\n      switch (result.status) {\n        case AuthenticationResultStatus.Redirect:\n          break;\n        case AuthenticationResultStatus.Success:\n          yield _this2.navigateToReturnUrl(returnUrl);\n          break;\n        case AuthenticationResultStatus.Fail:\n          yield _this2.router.navigate(ApplicationPaths.LoginFailedPathComponents, {\n            queryParams: {\n              [QueryParameterNames.Message]: result.message\n            }\n          });\n          break;\n        default:\n          throw new Error(`Invalid status result ${result.status}.`);\n      }\n    })();\n  }\n  processLoginCallback() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const url = window.location.href;\n      const result = yield _this3.authorizeService.completeSignIn(url);\n      switch (result.status) {\n        case AuthenticationResultStatus.Redirect:\n          // There should not be any redirects as completeSignIn never redirects.\n          throw new Error('Should not redirect.');\n        case AuthenticationResultStatus.Success:\n          yield _this3.navigateToReturnUrl(_this3.getReturnUrl(result.state));\n          break;\n        case AuthenticationResultStatus.Fail:\n          _this3.message.next(result.message);\n          break;\n      }\n    })();\n  }\n  redirectToRegister() {\n    this.redirectToApiAuthorizationPath(`${ApplicationPaths.IdentityRegisterPath}?returnUrl=${encodeURI('/' + ApplicationPaths.Login)}`);\n  }\n  redirectToProfile() {\n    this.redirectToApiAuthorizationPath(ApplicationPaths.IdentityManagePath);\n  }\n  navigateToReturnUrl(returnUrl) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      // It's important that we do a replace here so that we remove the callback uri with the\n      // fragment containing the tokens from the browser history.\n      yield _this4.router.navigateByUrl(returnUrl, {\n        replaceUrl: true\n      });\n    })();\n  }\n  getReturnUrl(state) {\n    const fromQuery = this.activatedRoute.snapshot.queryParams.returnUrl;\n    // If the url is coming from the query string, check that is either\n    // a relative url or an absolute url\n    if (fromQuery && !(fromQuery.startsWith(`${window.location.origin}/`) || /\\/[^\\/].*/.test(fromQuery))) {\n      // This is an extra check to prevent open redirects.\n      throw new Error('Invalid return url. The return url needs to have the same origin as the current page.');\n    }\n    return state && state.returnUrl || fromQuery || ApplicationPaths.DefaultLoginRedirectPath;\n  }\n  redirectToApiAuthorizationPath(apiAuthorizationPath) {\n    // It's important that we do a replace here so that when the user hits the back arrow on the\n    // browser they get sent back to where it was on the app instead of to an endpoint on this\n    // component.\n    const redirectUrl = `${window.location.origin}/${apiAuthorizationPath}`;\n    window.location.replace(redirectUrl);\n  }\n}\nLoginComponent.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.AuthorizeService), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router));\n};\nLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponent,\n  selectors: [[\"app-login\"]],\n  decls: 3,\n  vars: 3,\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"p\");\n      i0.ɵɵtext(1);\n      i0.ɵɵpipe(2, \"async\");\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(2, 1, ctx.message));\n    }\n  },\n  dependencies: [i3.AsyncPipe],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["AuthenticationResultStatus","BehaviorSubject","LoginActions","QueryParameterNames","ApplicationPaths","ReturnUrlType","LoginComponent","constructor","authorizeService","activatedRoute","router","ngOnInit","action","snapshot","url","path","Login","login","getReturnUrl","LoginCallback","processLoginCallback","LoginFailed","message","queryParamMap","get","Message","next","Profile","redirectToProfile","Register","redirectToRegister","Error","returnUrl","state","result","signIn","undefined","status","Redirect","Success","navigateToReturnUrl","Fail","navigate","LoginFailedPathComponents","queryParams","window","location","href","completeSignIn","redirectToApiAuthorizationPath","IdentityRegisterPath","encodeURI","IdentityManagePath","navigateByUrl","replaceUrl","fromQuery","startsWith","origin","test","DefaultLoginRedirectPath","apiAuthorizationPath","redirectUrl","replace","selectors","decls","vars","template","i0"],"sourceRoot":"","sources":["C:\\Users\\ricar\\source\\repos\\kabudjy\\Doyou2\\ClientApp\\src\\api-authorization\\login\\login.component.ts","C:\\Users\\ricar\\source\\repos\\kabudjy\\Doyou2\\ClientApp\\src\\api-authorization\\login\\login.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { AuthorizeService, AuthenticationResultStatus } from '../authorize.service';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { LoginActions, QueryParameterNames, ApplicationPaths, ReturnUrlType } from '../api-authorization.constants';\r\n\r\n// The main responsibility of this component is to handle the user's login process.\r\n// This is the starting point for the login process. Any component that needs to authenticate\r\n// a user can simply perform a redirect to this component with a returnUrl query parameter and\r\n// let the component perform the login and return back to the return url.\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  public message = new BehaviorSubject<string | null | undefined>(null);\r\n\r\n  constructor(\r\n    private authorizeService: AuthorizeService,\r\n    private activatedRoute: ActivatedRoute,\r\n    private router: Router) { }\r\n\r\n  async ngOnInit() {\r\n    const action = this.activatedRoute.snapshot.url[1];\r\n    switch (action.path) {\r\n      case LoginActions.Login:\r\n        await this.login(this.getReturnUrl());\r\n        break;\r\n      case LoginActions.LoginCallback:\r\n        await this.processLoginCallback();\r\n        break;\r\n      case LoginActions.LoginFailed:\r\n        const message = this.activatedRoute.snapshot.queryParamMap.get(QueryParameterNames.Message);\r\n        this.message.next(message);\r\n        break;\r\n      case LoginActions.Profile:\r\n        this.redirectToProfile();\r\n        break;\r\n      case LoginActions.Register:\r\n        this.redirectToRegister();\r\n        break;\r\n      default:\r\n        throw new Error(`Invalid action '${action}'`);\r\n    }\r\n  }\r\n\r\n\r\n  private async login(returnUrl: string): Promise<void> {\r\n    const state: INavigationState = { returnUrl };\r\n    const result = await this.authorizeService.signIn(state);\r\n    this.message.next(undefined);\r\n    switch (result.status) {\r\n      case AuthenticationResultStatus.Redirect:\r\n        break;\r\n      case AuthenticationResultStatus.Success:\r\n        await this.navigateToReturnUrl(returnUrl);\r\n        break;\r\n      case AuthenticationResultStatus.Fail:\r\n        await this.router.navigate(ApplicationPaths.LoginFailedPathComponents, {\r\n          queryParams: { [QueryParameterNames.Message]: result.message }\r\n        });\r\n        break;\r\n      default:\r\n        throw new Error(`Invalid status result ${(result as any).status}.`);\r\n    }\r\n  }\r\n\r\n  private async processLoginCallback(): Promise<void> {\r\n    const url = window.location.href;\r\n    const result = await this.authorizeService.completeSignIn(url);\r\n    switch (result.status) {\r\n      case AuthenticationResultStatus.Redirect:\r\n        // There should not be any redirects as completeSignIn never redirects.\r\n        throw new Error('Should not redirect.');\r\n      case AuthenticationResultStatus.Success:\r\n        await this.navigateToReturnUrl(this.getReturnUrl(result.state));\r\n        break;\r\n      case AuthenticationResultStatus.Fail:\r\n        this.message.next(result.message);\r\n        break;\r\n    }\r\n  }\r\n\r\n  private redirectToRegister(): any {\r\n    this.redirectToApiAuthorizationPath(\r\n      `${ApplicationPaths.IdentityRegisterPath}?returnUrl=${encodeURI('/' + ApplicationPaths.Login)}`);\r\n  }\r\n\r\n  private redirectToProfile(): void {\r\n    this.redirectToApiAuthorizationPath(ApplicationPaths.IdentityManagePath);\r\n  }\r\n\r\n  private async navigateToReturnUrl(returnUrl: string) {\r\n    // It's important that we do a replace here so that we remove the callback uri with the\r\n    // fragment containing the tokens from the browser history.\r\n    await this.router.navigateByUrl(returnUrl, {\r\n      replaceUrl: true\r\n    });\r\n  }\r\n\r\n  private getReturnUrl(state?: INavigationState): string {\r\n    const fromQuery = (this.activatedRoute.snapshot.queryParams as INavigationState).returnUrl;\r\n    // If the url is coming from the query string, check that is either\r\n    // a relative url or an absolute url\r\n    if (fromQuery &&\r\n      !(fromQuery.startsWith(`${window.location.origin}/`) ||\r\n        /\\/[^\\/].*/.test(fromQuery))) {\r\n      // This is an extra check to prevent open redirects.\r\n      throw new Error('Invalid return url. The return url needs to have the same origin as the current page.');\r\n    }\r\n    return (state && state.returnUrl) ||\r\n      fromQuery ||\r\n      ApplicationPaths.DefaultLoginRedirectPath;\r\n  }\r\n\r\n  private redirectToApiAuthorizationPath(apiAuthorizationPath: string) {\r\n    // It's important that we do a replace here so that when the user hits the back arrow on the\r\n    // browser they get sent back to where it was on the app instead of to an endpoint on this\r\n    // component.\r\n    const redirectUrl = `${window.location.origin}/${apiAuthorizationPath}`;\r\n    window.location.replace(redirectUrl);\r\n  }\r\n}\r\n\r\ninterface INavigationState {\r\n  [ReturnUrlType]: string;\r\n}\r\n","<p>{{ message | async }}</p>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}